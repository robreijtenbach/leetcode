from collections import deque
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])

        seen = []
        for i in range(m):
            seen.append([0]*n)

        def findIsland(i,j):
            q = deque()
            q.append((i,j))
            dirs = [(0,1),(1,0),(0,-1),(-1,0)]

            while q:
                i,j = q.popleft()
                if grid[i][j] == "0":
                    continue
                for d in dirs:
                    cur_i = i+d[0]
                    cur_j = j+d[1]
                    if 0 <= cur_i < m and 0 <= cur_j < n and not seen[cur_i][cur_j]:
                        seen[cur_i][cur_j] = 1
                        q.append((cur_i,cur_j))

        ret = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1" and not seen[i][j]:
                    findIsland(i,j)
                    ret += 1
        
        return ret




import unittest
class Test(unittest.TestCase):
    def test1(self):
        grid = [
                ["1","1","1","1","0"],
                ["1","1","0","1","0"],
                ["1","1","0","0","0"],
                ["0","0","0","0","0"]
                ]
        output =  1
        
        self.assertEqual(Solution().numIslands(grid), output)

    def test2(self):
        grid = [
                ["1","1","0","0","0"],
                ["1","1","0","0","0"],
                ["0","0","1","0","0"],
                ["0","0","0","1","1"]
                ]
        output = 3

        self.assertEqual(Solution().numIslands(grid), output)
    
    def test3(self):
        grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

        output = 3

        self.assertEqual(Solution().numIslands(grid), output)


unittest.main()